@using Error = Web.Components.Pages.Error
@using System.Net
@inject TokenProvider TokenProvider

<CascadingAuthenticationState>
    <ErrorBoundary>
        <ChildContent>
            <Router AppAssembly="@typeof(App).Assembly">
                @* Page found *@
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <Authorizing>
                            <MudText> Determining session state, please wait... </MudText>
                        </Authorizing>
                        <NotAuthorized>
                            @* If user is not authenticated redirect to login *@
                            @if (context.User.Identity!.IsAuthenticated == false)
                            {
                                <ReditectToLogin/>
                            }
                            @* Else the user is trying to access a page they do not have access to *@
                            else
                            {
                                <LayoutView Layout="@typeof(ErrorLayout)">
                                    <Error StatusCode="HttpStatusCode.Forbidden"></Error>
                                </LayoutView>
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>
                </Found>
                @* Not found *@
                <NotFound >
                    <LayoutView Layout="@typeof(ErrorLayout)">
                        <Error StatusCode="HttpStatusCode.NotFound"></Error>
                    </LayoutView>
                </NotFound>
            </Router>
        </ChildContent>
        @* Error handling  *@
        <ErrorContent Context="ex">
            <LayoutView Layout="@typeof(ErrorLayout)">
                <Error StatusCode="HttpStatusCode.InternalServerError" Exception="ex"></Error>
            </LayoutView>
        </ErrorContent>
    </ErrorBoundary>
</CascadingAuthenticationState>


@code {

    [Parameter] public InitialApplicationState? InitialState { get; set; }
    
    // Page initialized
    protected override void OnInitialized()
    {
        // Set token provider based on initial state
        TokenProvider.AccessToken = InitialState?.AccessToken;
        TokenProvider.RefreshToken = InitialState?.RefreshToken;
        TokenProvider.XsrfToken = InitialState?.XsrfToken;
    }
}