@* (Otway Mark, 2023) *@
@typeparam T

<div>
    <MudAutocomplete T="@T" @bind-Value="TheValue" SearchFunc="SearchFunc"
                     Label="@Label" Clearable="true" Immediate="false"
                     CoerceValue="true"
                     ToStringFunc="@GetNameFunc" HelperText="@HelperText"/>


    <MudChipSet AllClosable="true" OnClose="@RemoveValue">
        @foreach (T val in _selectedValues)
        {
            <MudChip Size=Size.Small Text="@GetNameFunc(val)"/>
        }
    </MudChipSet>
</div>

@code {
    [Parameter] public IEnumerable<T>? Values { get; set; }

    [Parameter] public EventCallback<IEnumerable<T>> ValuesChanged { get; set; }

    [Parameter] public string Label { get; set; } = null!;

    [Parameter] public string HelperText { get; set; } = null!;

    [Parameter] [EditorRequired] public Func<string, Task<IEnumerable<T>>> SearchFunc { get; set; } = null!;

    [Parameter] [EditorRequired] public Func<T, string> GetNameFunc { get; set; } = null!;

    //[Parameter, EditorRequired]
    //public Func<T, string> GetIdFunc { get; set; }

    private HashSet<T> _selectedValues = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Values == null)
        {
            _selectedValues.Clear();
        }
        else if (!Values.SequenceEqual(_selectedValues))
        {
            _selectedValues = Values.ToHashSet();
            ValuesChanged.InvokeAsync(Values);
        }
    }

    private void RefreshBinding()
    {
        Values = _selectedValues.ToList();
        ValuesChanged.InvokeAsync(Values);
        StateHasChanged();
    }

    private void RemoveValue(MudChip chip)
    {
        if (_selectedValues.RemoveWhere(x => GetNameFunc(x) == chip.Text) > 0)
            RefreshBinding();
    }

    private void AddValue(T newValue)
    {
        if (newValue == null) return;
        if (_selectedValues.Add(newValue))
            RefreshBinding();
    }

    /// <summary>
    /// Note that this is required to a) clear the control after you add
    /// an item to the list, and b) to trigger the addvalue method.
    /// If MudAutoComplete's bind-Value:after worked, we could get rid
    /// of this and just clear the value after it was added.
    /// </summary>
    private T TheValue
    {
        get => default!;
        set => AddValue(value);
    }

}